class Patterns {
	HTMLToText(text) {
		this.text = text;
		let Text = text.replaceAll("<", "&lt;");
		return Text;
	}
	email(text, user) {
		this.text = text;
		this.user = user;
		let reg = /(([a-zA-Z0-9])*@([a-zA-Z])*\.([a-zA-Z])*)/g;
		let Text = text.replace(reg, `<a href='mailto: $&'>${user}</a>`);
		return Text;
	}
	URL(text, user, trg) {
		this.text = text;
		this.user = user;
		this.trg = trg;
		let reg = /(((?:(http|https|rtsp|ftp|smtp):\/\/(?:(?:[a-zA-Z0-9\$\-\_\.\+\!\*\'\(\)\,\;\?\&\=]|(?:\%[a-fA-F0-9]{2})){1,64}(?:\:(?:[a-zA-Z0-9\$\-\_\.\+\!\*\'\(\)\,\;\?\&\=]|(?:\%[a-fA-F0-9]{2})){1,25})?\@)?)?((?:(?:[a-zA-Z0-9][a-zA-Z0-9\-]{0,64}\.)+(?:(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])|(?:biz|b[abdefghijmnorstvwyz])|(?:cat|com|coop|c[acdfghiklmnoruvxyz])|d[ejkmoz]|(?:edu|e[cegrstu])|f[ijkmor]|(?:gov|g[abdefghilmnpqrstuwy])|h[kmnrtu]|(?:info|int|i[delmnoqrst])|(?:jobs|j[emop])|k[eghimnrwyz]|l[abcikrstuvy]|(?:mil|mobi|museum|m[acdghklmnopqrstuvwxyz])|(?:name|net|n[acefgilopruz])|(?:org|om)|(?:pro|p[aefghklmnrstwy])|qa|r[eouw]|s[abcdeghijklmnortuvyz]|(?:tel|travel|t[cdfghjklmnoprtvwz])|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]))|(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[0-9])))(?:\:\d{1,5})?)(\/(?:(?:[a-zA-Z0-9\;\/\?\:\@\&\=\#\~\-\.\+\!\*\'\(\)\,\_])|(?:\%[a-fA-F0-9]{2}))*)?(?:\b|$))/gmi;
		let Text = text.replace(reg, `<a href='$&' target="_${trg}">${user}</a>`);
		return Text;
	}
	telegram(text, user) {
		this.text = text;
		this.user = user;
		let reg = /(?:@|(?:(?:(?:https?:\/\/)?t(?:elegram)?)\.me\/))(\w{4,})$/gim;
		let Text = text.replace(reg, `<a href='$&'>${user}</a>`);
		return Text;
	}
	tel(text, user) {
		this.text = text;
		this.user = user;
		let reg = /[0-9]{3,4}\-[0-9]{3}\-[0-9]{2}\-[0-9]{2}/gim;
		let Text = text.replace(reg, `<a href='tel: $&'>${user}</a>`);
		return Text;
	}
	file(text, user) {
		this.text = text;
		this.user = user;
		let reg = /[a-zA-Zа-яА-Яа-яА-Я%\|=\[\]<>\{\}#@\$\\_\-+\(\)!\?:;\*&^~]*\.(jpeg|jpg|gif|png|tiff|cpp|c|html|js|json|wtt|webp|cs|adt|aspx|avi|bat|bin|bmp|csv|dif|dll|doc|docm|docx|dot|dotx|exe|htm|iso|jar|java|m4a|mov|mp3|mp4|mpeg|mpg|pdf|pps|ppsm|ppsx|pptm|ppt|pptx|pub|rtf|sys|tif|tmp|txt|wav|xls|xlsm|xlsx|zip|css|abap|asp|as|cls|applescript|ico|aj|inc|cmd|h|c|w|c\+{2}|h\+{2}|coffee|cson|cr|py|com|ex|erl|fs|go)/gmi;
		let Text = text.replace(reg, `${user}$&${user}`);
		return Text;
	}
	image(text, user) {
		this.text = text;
		this.user = user;
		let reg = /[a-zA-Zа-яА-Яа-яА-Я%\|=\[\]<>\{\}#@\$\\_\-+\(\)!\?:;\*&^~]*\.(jpeg|jpg|gif|png|tiff|webp|ico)/gmi;
		let Text = text.replace(reg, `<img src="$&" alt="${user}">`);
		return Text;
	}
	pFile(text, user, trg) {
		this.text = text;
		this.user = user;
		this.trg = trg;
		let reg = /[a-zA-Zа-яА-Яа-яА-Я%\|=\[\]<>\{\}#@\$\\_\-+\(\)!\?:;\*&^~]*\.(cpp|c|html|js|json|cs|bat|csv|dll|htm|jar|java|sys|css|asp|as|cls|applescript|aj|cmd|h|c|w|c\+{2}|h\+{2}|coffee|cson|cr|py|com|ex|erl|fs|go)/gmi;
		let Text = text.replace(reg, `<a href="$&" target="_${trg}">${user}</a>`);
		return Text;
	}
}